generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  OWNER
  MEMBER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  emailVerified    DateTime?
  password         String
  image            String?
  onboarded        Boolean?  @default(false)
  activeProductId  String?
  activeProduct    Product?  @relation(fields: [activeProductId], references: [id])
  stripeCustomerId String?   @default("")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())

  projectMembers   ProjectMember[]
  accounts         Account[]
  sessions         Session[]
  invitations      Invitation[]
  sentWelcomeEmail Boolean   @default(false)

  @@index([activeProductId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  defaultRole Role     @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  members     ProjectMember[]
  invitations Invitation[]
}

model ProjectMember {
  id           String   @id @default(uuid())
  projectId    String
  userId       String
  role         Role     @default(MEMBER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Invitation {
  id           String   @id @default(uuid())
  projectId    String
  email        String
  role         Role     @default(MEMBER)
  token        String   @unique
  expires      DateTime
  invitedBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
}

model PasswordReset {
  id            Int      @id @default(autoincrement())
  email         String
  token         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime
}

model Product {
  id              String   @id @default(uuid())
  name            String
  image           String?
  description     String
  period          String
  price           Int
  trialPeriod     Int?     @default(0)
  attachedRole    String
  features        String
  stripeProductId String
  stripePriceId   String
  createdAt       DateTime @default(now())
  User            User[]
}

model Checkout {
  id         String   @id @default(uuid())
  identifier String
  productId  String
  userId     String
  status     String
  createdAt  DateTime @default(now())
}

model Document {
  id        String     @id @default(cuid())
  name      String
  description String?
  file      String     // This should be a reference to where the file is stored (S3, Google Cloud Storage, etc.)
  type      String?    // This should be a reference to the file type (pdf, docx, etc.)
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   String     // This field holds the foreign key.
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  links     Link[]
  views     View[]
}

model Link {
  id            String      @id @default(cuid())
  document      Document    @relation(fields: [documentId], references: [id])
  documentId    String
  url           String?     @unique
  expiresAt     DateTime?   // Optional expiration date
  password      String?     // Optional password for link protection
  allowedEmails String[]    // Array of emails allowed to view the document
  views         View[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model View {
  id          String      @id @default(cuid())
  link        Link        @relation(fields: [linkId], references: [id])
  linkId      String
  document    Document    @relation(fields: [documentId], references: [id])
  documentId  String
  viewerEmail String?     // Email of the viewer if known
  viewedAt    DateTime    @default(now())
}
